<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cs" #>
<# 
ZippyT4Host host = (ZippyT4Host)(Host);
Project project = host.Project;
Table table = host.Table;

Col colPK = table.FindPKCol();
Type colPKType = ZippyCoder.TypeConverter.ToNetType(colPK.DataType);	
bool isTenantTable = false;
#>
using System;
using System.Collections;
using System.Web.Mvc;
using Zippy.Data.Collections;
using Zippy.SaaS.Resources;
using System.Collections.Generic;
using System.Xml;
using Zippy.Helper;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Linq;
using <#=project.Namespace#>.Entity;
using <#=project.Namespace#>.Entity.Helper;


namespace <#=project.Namespace#>.Controllers
{
	public class <#=table.Name#>Controller :  Zippy.SaaS.Web.ControllerUser
	{
		protected int pageSize = 20;
		<#	
		
		
			System.Text.StringBuilder extFields = new System.Text.StringBuilder();
			System.Text.StringBuilder extListCols = new System.Text.StringBuilder();
			System.Text.StringBuilder extQueryFields = new System.Text.StringBuilder();
			System.Text.StringBuilder extQueryParams = new System.Text.StringBuilder();
			System.Text.StringBuilder extQuerySetParams = new System.Text.StringBuilder();
			extQuerySetParams.AppendLine();
			System.Text.StringBuilder extEditFields = new System.Text.StringBuilder();
			System.Text.StringBuilder extJPropertyFields = new System.Text.StringBuilder(); //列表显示的fields
			System.Text.StringBuilder extJPropertyFieldsEdit = new System.Text.StringBuilder(); //编辑时候load 出来的 fields
			
			System.Text.StringBuilder sbQueryParams = new System.Text.StringBuilder();
			System.Text.StringBuilder sbQueryHash = new System.Text.StringBuilder();
			System.Text.StringBuilder sbValidateMethods = new System.Text.StringBuilder();
			
			foreach (Col col in table.Cols) 
			{
				if (col.Name=="TenantID") isTenantTable = true;
				System.Data.DbType xtyppe = ZippyCoder.TypeConverter.ToDbType(col.DataType);
				Type colType = ZippyCoder.TypeConverter.ToNetType(col.DataType);
				
				if(col.IsPK && (col.UIColType & UIColTypes.Listable) != UIColTypes.Listable){  //list的时候必须输出主键
					if (colType==typeof(Guid))
						extJPropertyFields.Append("new JProperty(\"" + col.Name + "\", s." + col.Name + ".ToString()),");
					else
						extJPropertyFields.Append("new JProperty(\"" + col.Name + "\", s." + col.Name + "),");
						
					if (colType == typeof(int) || colType == typeof(long))
						extFields.Append("{name:'" + col.Name + "',type:'int'},");
					else if (colType == typeof(float) || colType == typeof(double))
						extFields.Append("{name:'" + col.Name + "',type:'float'},");
					else
						extFields.Append("'" + col.Name + "',");
						
				}
				if ((col.UIColType & UIColTypes.Listable) == UIColTypes.Listable) 
				{
					if (colType==typeof(Guid))
						extJPropertyFields.Append("new JProperty(\"" + col.Name + "\", s." + col.Name + ".ToString()),");
					else if (colType==typeof(DateTime))
						extJPropertyFields.Append("new JProperty(\"" + col.Name + "\", s." + col.Name + ".Value.ToString(\"yyyy-MM-dd\")),");
					else
						extJPropertyFields.Append("new JProperty(\"" + col.Name + "\", s." + col.Name + "),");
						
					
					
					if (col.IsPK) {
						extListCols.Append("{header: '\" + R.V(\"" + col.Name + "\") + \"',id: '" + col.Name + "', dataIndex: '" + col.Name + "'},");
					} else {
						extListCols.Append("{");
						extListCols.Append("header: '\" + R.V(\"" + col.Name + "\") + \"',");
						if (col.WidthPx > 0)
							extListCols.Append("width: " + col.WidthPx + ", sortable: false, dataIndex: '" + col.Name + "'");
						else if (colType==typeof(string))
							extListCols.Append("width:300,sortable:false, dataIndex:'" + col.Name + "'");
						else
							extListCols.Append("width:50,sortable:false, dataIndex:'" + col.Name + "'");
						extListCols.Append("},");						
					}
					
					if (colType == typeof(int) || colType == typeof(long))
						extFields.Append("{name:'" + col.Name + "',type:'int'},");
					else if (colType == typeof(float) || colType == typeof(double))
						extFields.Append("{name:'" + col.Name + "',type:'float'},");
					else
						extFields.Append("'" + col.Name + "',");
				}
				
				if ((col.UIColType & UIColTypes.Editable) == UIColTypes.Editable) 
				{
				
					if (colType==typeof(Guid))
						extJPropertyFieldsEdit.Append("new JProperty(\"" + col.Name + "\", entity." + col.Name + ".ToString()),");
					else if (colType==typeof(DateTime))
						extJPropertyFieldsEdit.Append("new JProperty(\"" + col.Name + "\", entity." + col.Name + ".Value.ToString(\"yyyy-MM-dd\")),");
					else
						extJPropertyFieldsEdit.Append("new JProperty(\"" + col.Name + "\", entity." + col.Name + "),");
						
					int maxLength=0;
					try
					{
						maxLength = int.Parse(col.Length);
					}catch{}
					extEditFields.Append("sbFormItems.AppendLine(\"{");
					extEditFields.Append("name:'" + col.Name + "',");
					
					if (col.RenderType == RenderTypes.FileUpload){
						extEditFields.Append("xtype:'fileuploadfield',");
						extEditFields.Append("emptyText: 'Select a file',");
						extEditFields.Append("buttonText: '',");
						extEditFields.Append("buttonCfg: {icon:'/Content/Images/upload.gif'},");
					}
					if (colType==typeof(int)||colType==typeof(long)){
						extEditFields.Append("xtype:'numberfield',");					
					}else if (colType==typeof(DateTime)){
						extEditFields.Append("xtype:'datefield',");	
					}
					if (!col.IsNull)
						extEditFields.Append("allowBlank:false,");
					if (maxLength>0)
						extEditFields.Append("maxLength:" + maxLength + ",");
						
					if (col.WidthPx > 0)
						extEditFields.Append("width: " + col.WidthPx + ", ");
					else if (colType==typeof(string))
						extEditFields.Append("width:300,");
					else
						extEditFields.Append("width:50,");							
					extEditFields.Append("fieldLabel:'\" + R.V(\"" + col.Name + "\") + \"'");
					extEditFields.Append("},\");");					
					extEditFields.AppendLine();
					
					
					if (!col.IsNull){
						if (colType==typeof(string)){
							sbValidateMethods.AppendLine("            if (string.IsNullOrEmpty(entity." + col.Name + "))");
							sbValidateMethods.AppendLine("                return false;");						
							if (maxLength>0){
								sbValidateMethods.AppendLine("            else if (entity." + col.Name + ".Length > " + col.Length + ")");
								sbValidateMethods.AppendLine("                return false;");
							}
						} else if (colType==typeof(int)||colType==typeof(long)) {
							sbValidateMethods.AppendLine("            if (entity." + col.Name + "==0)");
							sbValidateMethods.AppendLine("                return false;");							
						}else if (colType==typeof(Guid)) {
							sbValidateMethods.AppendLine("            if (entity." + col.Name + "==Guid.Empty)");
							sbValidateMethods.AppendLine("                return false;");							
						}
					}
					else{
						if (colType==typeof(string)  && !string.IsNullOrEmpty(col.Length)){
							sbValidateMethods.AppendLine("            if (!string.IsNullOrEmpty(entity." + col.Name + ") && entity." + col.Name + ".Length > " + col.Length + " )");
							sbValidateMethods.AppendLine("                return false;");
						}
					}
		
				}
				
				if ((col.UIColType & UIColTypes.Queryable) == UIColTypes.Queryable) 
				{
					if (colType == typeof(string)) 
					{
						sbQueryParams.Append("string q" + col.Name + ", ");
						sbQueryHash.AppendLine("            hs.Add(\"q" + col.Name + "\", q" + col.Name + ");");
						extQueryFields.Append("'\" + R.V(\"" + col.Name + "\") + \": ',{ xtype: 'textfield',id: 'q" + col.Name + "'},");
						extQueryParams.Append("q" + col.Name + ":'', ");
						extQuerySetParams.AppendLine("				sbSearchActionJs.AppendLine(\"grid.getStore().setBaseParam('q" + col.Name + "', Ext.get('q" + col.Name + "').getValue());\");");
					}
					else if (col.RenderType == RenderTypes.RadioButtonList || col.RenderType == RenderTypes.DropDownList || col.RenderType == RenderTypes.CheckBoxList)
					{
						sbQueryParams.Append(colType.Name + "? q" + col.Name + ", ");
						sbQueryHash.AppendLine("            hs.Add(\"q" + col.Name + "\", q" + col.Name + ");");
						extQueryFields.Append("'\" + R.V(\"" + col.Name + "\") + \": ',{ xtype: 'combo',id: 'q" + col.Name + "'},");
						extQueryParams.Append("q" + col.Name + ":'', ");
						extQuerySetParams.AppendLine("				sbSearchActionJs.AppendLine(\"grid.getStore().setBaseParam('q" + col.Name + "', Ext.get('q" + col.Name + "').getValue());\");");
					}
					else if (colType.IsValueType)
					{
						sbQueryParams.Append(colType.Name + "? q" + col.Name + "Start, ");
						sbQueryParams.Append(colType.Name + "? q" + col.Name + "End, ");
						sbQueryHash.AppendLine("            hs.Add(\"q" + col.Name + "Start\", q" + col.Name + "Start);");
						sbQueryHash.AppendLine("            hs.Add(\"q" + col.Name + "End\", q" + col.Name + "End);");
						extQuerySetParams.AppendLine("				sbSearchActionJs.AppendLine(\"grid.getStore().setBaseParam('q" + col.Name + "Start', Ext.get('q" + col.Name + "Start').getValue());\");");
						extQuerySetParams.AppendLine("				sbSearchActionJs.AppendLine(\"grid.getStore().setBaseParam('q" + col.Name + "End', Ext.get('q" + col.Name + "End').getValue());\");");
						
						if (colType==typeof(DateTime))
						{
							extQueryFields.Append("'\" + R.V(\"" + col.Name + "\") + \": ',{ xtype: 'datefield',id: 'q" + col.Name + "Start',format:'Y-m-d',emptyText:'\" + R.V(\"Start date\") + \"' },");
							extQueryFields.Append("'-', { xtype: 'datefield',id: 'q" + col.Name + "End',format:'Y-m-d',emptyText:'\" + R.V(\"End date\") + \"'},");
						}
						else if (colType==typeof(int) || colType==typeof(long))
						{
							extQueryFields.Append("'\" + R.V(\"" + col.Name + "\") + \": ',{ xtype: 'numberfield',id: 'q" + col.Name + "Start',emptyText:'\" + R.V(\"Start value\") + \"'},");
							extQueryFields.Append("'-', { xtype: 'numberfield',id: 'q" + col.Name + "End',emptyText:'\" + R.V(\"End value\") + \"'},");
						}
						else
						{
							extQueryFields.Append("'\" + R.V(\"" + col.Name + "\") + \": ',{ xtype: 'textfield',id: 'q" + col.Name + "Start',emptyText:'\" + R.V(\"Start value\") + \"'},");
							extQueryFields.Append("'-', { xtype: 'textfield',id: 'q" + col.Name + "End',emptyText:'\" + R.V(\"End value\") + \"'},");
						}
						extQueryParams.Append("q" + col.Name + "Start:'', ");
						extQueryParams.Append("q" + col.Name + "End:'', ");
					}
				}
			}
		#>
		
        protected bool Validate<#=table.Name#>(<#=table.Name#> entity)
        {
        <#=sbValidateMethods.ToString()#>
        	return true;
        }
		
		
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult EAPCreate(<#=table.Name#> entity)
        {
            JObject res = new JObject();
            
            <# if (colPKType==typeof(Guid)){#>
            	entity.<#=colPK.Name#> = Guid.NewGuid();
            <#}#>
            
						<# if (isTenantTable) {#>
            entity.TenantID = _tenant.TenantID;
            <#}#>
            entity.Creator = _user.UserID;

            if (!Validate<#=table.Name#>(entity))
            {
                res.Add(new JProperty("success", false));
                res.Add(new JProperty("msg", R.V("Validation failure")));
                return Content(res.ToString());
            }
            if (db.Insert(entity) > 0)
            {
                res.Add(new JProperty("success", true));
                res.Add(new JProperty("msg", R.V("Creation successfully")));
                return Content(res.ToString());
            }
            else
            {
                res.Add(new JProperty("success", false));
                res.Add(new JProperty("msg", R.V("Creation failure")));
                return Content(res.ToString());
            }

        }
        
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult EAPUpdate(<#=colPKType#> id, <#=table.Name#> entity)
        {
            JObject res = new JObject();
            entity.<#=colPK.Name#> = id;            
            entity.Updater = _user.UserID;
            entity.UpdateDate = DateTime.Now;

            if (!Validate<#=table.Name#>(entity))
            {
                res.Add(new JProperty("success", false));
                res.Add(new JProperty("msg", R.V("Validation failure")));
                return Content(res.ToString());
            }
            if (db.Update(entity) > 0)
            {
                res.Add(new JProperty("success", true));
                res.Add(new JProperty("msg", R.V("Updating successfully")));
                return Content(res.ToString());
            }
            else
            {
                res.Add(new JProperty("success", false));
                res.Add(new JProperty("msg", R.V("Updating failure")));
                return Content(res.ToString());
            }
        }
        
        public ActionResult EAPDelete(string id)
        {
            if (string.IsNullOrEmpty(id)) return Content("0");

            id = id.Trim();
            if (id.IndexOf("'") >= 0) return Content("0");
            if (!id.EndsWith(",")) return Content("0");
            id = id.Substring(0, id.Length - 1);
            
            <# if (colPKType==typeof(Guid)){#>
				string sql = "<#=colPK.Name#> in ('" + id.Replace(",", "','") + "')";
            <#} else if (colPKType==typeof(int)||colPKType==typeof(long)) { #>
				string sql = "<#=colPK.Name#> in (" + id + ")";
            <#}#>
			
			
            if (db.Delete<<#=table.Name#>>(sql) > 0)
                return this.Content("1");
            else
                return this.Content("0");
        }
        
        public ActionResult EAPLoad(<#=colPKType#> id)
        {
            <#=table.Name#> entity = <#=table.Name#>Helper.Create(db, id);
            if (entity != null)
            {
                JObject jobj = new JObject(
                    new JProperty("success", true),
                    new JProperty("data", new JObject(
                        <#
								       	if (extJPropertyFieldsEdit.Length>2)
								       		Write(extJPropertyFieldsEdit.Remove(extJPropertyFieldsEdit.Length-1, 1).ToString()); //去掉结尾逗号
        								#>
                            )

                       )
                    );
                return Content(jobj.ToString());
            }
            else
            {
                JObject jobj = new JObject(
                    new JProperty("success", false),
                    new JProperty("msg", R.V("Object not found"))
                    );
                return Content(jobj.ToString());
            }
        }

        public ActionResult EAPList(int? start, int? limit, <#=sbQueryParams.ToString()#> int? orderCol)
        {
            int currentPageSize = limit ?? pageSize;
            int currentPageIndex = start.HasValue ? (start.Value / currentPageSize) + 1 : 1;

            Hashtable hs = new Hashtable();
            
<#=sbQueryHash.ToString()#>


            PaginatedList<<#=table.Name#>> result = <#=table.Name#>Helper.Query(db, currentPageSize, currentPageIndex, hs, orderCol);
            result.QueryParameters = hs;

            JObject jobj = new JObject(
                new JProperty("totalCount", result.TotalCount),
                new JProperty("items",
                    new JArray(
                        from s in result
                        select new JObject(
                        <#
								       	if (extJPropertyFields.Length>2)
								       		Write(extJPropertyFields.Remove(extJPropertyFields.Length-1, 1).ToString()); //去掉结尾逗号
        								#>
                        )
                      )
                   )
                );

            return Content(jobj.ToString(), "text/plain");
        }


		public ActionResult Index()
    {
        Zippy.Data.Collections.ExtJsData data = new ExtJsData();
        data.PK = "<#=colPK.Name#>";
        data.Control = "<#=table.Name.ToLower()#>";
        data.PageSize = pageSize;
        data.Title = R.V("<#=table.Name#>");


        System.Text.StringBuilder sbFields = new System.Text.StringBuilder();
        sbFields.AppendLine();
        sbFields.AppendLine("[");
        sbFields.AppendLine("<#
	       	if (extFields.Length>2)
	       		Write(extFields.Remove(extFields.Length-1, 1).ToString());
        #>");
        sbFields.AppendLine("]");
        data.Fields = sbFields.ToString();

        System.Text.StringBuilder sbColumnModel = new System.Text.StringBuilder();
        sbColumnModel.AppendLine();
        sbColumnModel.AppendLine("[");
        sbColumnModel.AppendLine("<#
	       	if (extListCols.Length>2)
	       		Write(extListCols.Remove(extListCols.Length-1, 1).ToString());
	      #>");
        sbColumnModel.AppendLine("]");
        data.ColumnModel = sbColumnModel.ToString();

        System.Text.StringBuilder sbToolBars = new System.Text.StringBuilder();
        sbToolBars.AppendLine();
        sbToolBars.AppendLine("[");
        sbToolBars.AppendLine("{text: '" + R.V("Create") + "',icon:'/Content/images/create.gif', handler:function(){eapCreate()}},");
        sbToolBars.AppendLine("{text: '" + R.V("Delete") + "',icon:'/Content/images/delete.gif', handler:function(){eapDelete();}},");
        sbToolBars.AppendLine("{text: '" + R.V("Modify") + "',icon:'/Content/images/edit.gif', handler:function(){eapEdit();}},");
        sbToolBars.AppendLine("'->', ");

        //Search Fields *********************
        sbToolBars.AppendLine("<#=extQueryFields.ToString()#>");
        sbToolBars.AppendLine("'',");
        //***********************************

        sbToolBars.AppendLine("{text:'" + R.V("Search") + "',icon:'/Content/images/search.gif', handler:function(){eapSearch()}}");
        sbToolBars.AppendLine("]");
        data.ToolBars = sbToolBars.ToString();

        System.Text.StringBuilder sbSearchParams = new System.Text.StringBuilder();
        sbSearchParams.AppendLine();
        sbSearchParams.AppendLine("{");
        sbSearchParams.AppendLine("<#
	       	if (extQueryParams.Length>2)
	       		Write(extQueryParams.Remove(extQueryParams.Length-1, 1).ToString());
	      #>");
        sbSearchParams.AppendLine("}");
        data.SearchParams = sbSearchParams.ToString();


        System.Text.StringBuilder sbSearchActionJs = new System.Text.StringBuilder();
        sbSearchActionJs.AppendLine();
        <#=extQuerySetParams.ToString()#>
        data.SearchActionJs = sbSearchActionJs.ToString();

        System.Text.StringBuilder sbFormItems = new System.Text.StringBuilder();
        sbFormItems.AppendLine();
        sbFormItems.AppendLine("[");            
        <#
        string extEditFieldsStr = extEditFields.ToString();
        if (extEditFieldsStr.Length > 5){
			extEditFieldsStr = extEditFieldsStr.Remove(extEditFieldsStr.LastIndexOf(','), 1);			
        }
        Write(extEditFieldsStr);
	      #>
        sbFormItems.AppendLine("]");
        data.FormItems = sbFormItems.ToString();

        return View(data);
    }
	}
}
