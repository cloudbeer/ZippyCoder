<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cs" #>
<# 
ZippyT4Host host = (ZippyT4Host)(Host);
Project project = host.Project;
Table table = host.Table;

Col colPK = table.FindPKCol();
#>
using System;
using System.Collections;
using System.Web.Mvc;
using <#=project.Namespace#>.Entity;
using <#=project.Namespace#>.Entity.Helper;
using Zippy.Data.Collections;
using Zippy.SaaS.Resources;

namespace <#=project.Namespace#>.Controllers
{

    public class <#=table.Name#>Controller :  Zippy.SaaS.Web.ControllerUser
    {
<#
System.Text.StringBuilder sbQueryParams = new System.Text.StringBuilder();
System.Text.StringBuilder sbQueryHash = new System.Text.StringBuilder();
System.Text.StringBuilder sbRequestFormCheckBoxList = new System.Text.StringBuilder();
System.Text.StringBuilder sbValidateMethods = new System.Text.StringBuilder();
Col pkCol = null;
Type pkType = typeof(int);

foreach (Col col in table.Cols) 
{
    System.Data.DbType xtyppe = ZippyCoder.TypeConverter.ToDbType(col.DataType);
    Type colType = ZippyCoder.TypeConverter.ToNetType(col.DataType);
	if (col.IsPK)
	{
	pkCol = col;
	pkType = colType;
	}
	if ((col.UIColType & UIColTypes.Queryable) == UIColTypes.Queryable) 
	{
		if (colType == typeof(string)) 
		{
			sbQueryParams.Append("string q" + col.Name + ", ");
			sbQueryHash.AppendLine("            hs.Add(\"q" + col.Name + "\", q" + col.Name + ");");
		}
		else if (col.RenderType == RenderTypes.RadioButtonList || col.RenderType == RenderTypes.DropDownList || col.RenderType == RenderTypes.CheckBoxList)
		{
			sbQueryParams.Append(colType.Name + "? q" + col.Name + ", ");
			sbQueryHash.AppendLine("            hs.Add(\"q" + col.Name + "\", q" + col.Name + ");");
		}
		else if (colType.IsValueType)
		{
			sbQueryParams.Append(colType.Name + "? q" + col.Name + "Start, ");
			sbQueryParams.Append(colType.Name + "? q" + col.Name + "End, ");
			sbQueryHash.AppendLine("            hs.Add(\"q" + col.Name + "Start\", q" + col.Name + "Start);");
			sbQueryHash.AppendLine("            hs.Add(\"q" + col.Name + "End\", q" + col.Name + "End);");
		}
	}
	
	if (col.RenderType == RenderTypes.CheckBoxList)
	{
		sbRequestFormCheckBoxList.AppendLine("                string form" + col.Name + " = Request.Form[\"" + col.Name + "\"];");
		sbRequestFormCheckBoxList.AppendLine("                entity." + col.Name + " = Zippy.Helper.ZData.EnumStringToInt32(form" + col.Name + ");");
	}
	
	if ((col.UIColType & UIColTypes.Editable) == UIColTypes.Editable) 
	{
		if (!col.IsNull){
			sbValidateMethods.AppendLine("            if (string.IsNullOrEmpty(entity." + col.Name + "))");
			sbValidateMethods.AppendLine("                ModelState.AddModelError(\"" + col.Name + " required\", R.V(\"Required\"));");
			if (colType==typeof(string) && !string.IsNullOrEmpty(col.Length)){
				sbValidateMethods.AppendLine("            else if (entity." + col.Name + ".Length > " + col.Length + ")");
				sbValidateMethods.AppendLine("                ModelState.AddModelError(\"" + col.Name + " string length error\", R.V(\"String length error\"));");
			}
		}
		else{
			if (colType==typeof(string)  && !string.IsNullOrEmpty(col.Length)){
				sbValidateMethods.AppendLine("            if (!string.IsNullOrEmpty(entity." + col.Name + ") && entity." + col.Name + ".Length > " + col.Length + " )");
				sbValidateMethods.AppendLine("                ModelState.AddModelError(\"" + col.Name + " string length error\", R.V(\"String length error\"));");
			}
		}
	}
}
#>


		#region 验证
        protected void Validate<#=table.Name#>(<#=table.Name#> entity)
        {
<#=sbValidateMethods#>
        }
		#endregion
		
		#region 查询
        public ActionResult Index(int? PageIndex, int? PageSize, <#=sbQueryParams.ToString()#> int? orderCol)
        {
            int currentPageSize = PageSize ?? 20;
            int currentPageIndex = PageIndex ?? 1;	
			
            Hashtable hs = new Hashtable();
<#=sbQueryHash.ToString()#>
            PaginatedList<<#=table.Name#>> result = <#=table.Name#>Helper.Query(db, currentPageSize, currentPageIndex, hs, orderCol);
            result.QueryParameters = hs;
            return View(result);
        }
		#endregion
		
		#region 详情

        public ActionResult Details(<#=pkType#> id)
        {
            <#=table.Name#> entity = <#=table.Name#>Helper.Create(db, id);
            return View(entity);
        }
		#endregion
		
		#region 创建
        public ActionResult Create()
        {
            <#=table.Name#> entity = new <#=table.Name#>();
            return View(entity);
        } 



        [AcceptVerbs(HttpVerbs.Post)]
        [ValidateInput(false)]
        public ActionResult Create(<#=table.Name#> entity)
        {
<#=sbRequestFormCheckBoxList.ToString()#>
            Validate<#=table.Name#>(entity);
            if (!ModelState.IsValid)
                return View(entity);
				
            try
            {
				db.Insert(entity);
                return RedirectToAction("Index");
            }
            catch
            {
                return View();
            }
        }
		#endregion
		
		#region 删除

        public ActionResult Delete(<#=pkType#> id)
        {
            if (db.Delete<<#=table.Name#>>(id) > 0)
				return this.Content("1");
			else
				return this.Content("0");
        }
 
		#endregion
		
		#region 修改
		
        public ActionResult Edit(<#=pkType#> id)
        {
            <#=table.Name#> entity = <#=table.Name#>Helper.Create(db, id);
            return View(entity);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        [ValidateInput(false)]
        public ActionResult Edit(<#=pkType#> id, <#=table.Name#> entity)
        {
				entity.<#=colPK.Name#> = id;
<#=sbRequestFormCheckBoxList.ToString()#>

            Validate<#=table.Name#>(entity);
            if (!ModelState.IsValid)
                return View(entity);
				
            try
            {
				db.Update(entity);
				
                string returnUrl =  Request["returnUrl"];
                if (!string.IsNullOrEmpty(returnUrl))
                    return Redirect(returnUrl);
                else
                    return RedirectToAction("Index");
            }
            catch
            {
                return View(entity);
            }
        }
		#endregion
    }
}
